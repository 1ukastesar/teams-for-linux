# .github/workflows/sync.yml

name: Sync upstream

on:
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:

jobs:
  rebase:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTIONS_PAT }}
      - name: Rebase onto upstream
        run: |
          git config --global user.name ${{ secrets.REPOSITORY_OWNER_NAME }}
          git config --global user.email "${GITHUB_REPOSITORY_OWNER}@users.noreply.github.com"

          # "git checkout main" is unnecessary, already here by default
          git pull --unshallow  # this option is very important, you would get
                                # complains about unrelated histories without it.
                                # (but actions/checkout@v2 can also be instructed
                                # to fetch all git depth right from the start)


          git remote add ${{ vars.UPSTREAM_NAME }} ${{ vars.UPSTREAM_URL }}

          git fetch ${{ vars.UPSTREAM_NAME }}
          git rebase ${{ vars.UPSTREAM_NAME }}/main -X theirs || (git rm .github/workflows/snap.yml && git rebase --continue)

          # Loop while the rebase directory exists
          while [ -d ".git/rebase-merge" ] || [ -d ".git/rebase-apply" ]; do

            # Get list of unmerged (conflicting) files
            CONFLICTS=$(git diff --name-only --diff-filter=U)

            if [ -n "$CONFLICTS" ]; then
              echo "Resolving conflicts by deleting files:"
              echo "$CONFLICTS"

              # Loop through conflicting files and 'git rm' them
              for FILE in $CONFLICTS; do
                git rm "$FILE"
              done

              # Continue the rebase
              echo "Continuing rebase..."
              git rebase --continue
            else
              # No conflicts detected, but rebase is paused
              # This can happen (e.g., empty commit). Skip it.
              echo "Rebase paused, no U-state files. Skipping."
              git rebase --skip
            fi
          done

          echo "Rebase completed successfully."

          # This authenticates with secrets.ACTIONS_PAT, because it was
          # used with the checkout action
          git push --force-with-lease --force-if-includes origin main

      - name: Trigger build
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'publish-trigger',
            });
